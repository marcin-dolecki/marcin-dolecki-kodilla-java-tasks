use kodilla_course;
set global log_bin_trust_function_creators=1;

CREATE TABLE BOOKS (
                       BOOK_ID int(11) NOT NULL AUTO_INCREMENT,
                       TITLE varchar(255) NOT NULL,
                       PUBYEAR int(4) NOT NULL,
                       PRIMARY KEY (BOOK_ID)
);

CREATE TABLE READERS (
                         READER_ID int(11) NOT NULL AUTO_INCREMENT,
                         FIRSTNAME varchar(255) NOT NULL,
                         LASTNAME varchar(255) NOT NULL,
                         PESELID varchar(11) NOT NULL,
                         PRIMARY KEY (READER_ID)
);

CREATE TABLE RENTS (
                       RENT_ID int(11) NOT NULL AUTO_INCREMENT,
                       BOOK_ID int(11) NOT NULL,
                       READER_ID int(11) NOT NULL,
                       RENT_DATE datetime NOT NULL,
                       RETURN_DATE datetime,
                       PRIMARY KEY (RENT_ID),
                       FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
                       FOREIGN KEY (READER_ID) REFERENCES READERS(READER_ID)
);

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('John', 'Smith', '83012217938');

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('Curtis', 'Wilson', '75121002790');

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('Cathy', 'Booker', '90112801727');

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('Marissa', 'Cain', '84061908044');

INSERT INTO READERS(FIRSTNAME, LASTNAME, PESELID)
VALUES ('Muriel', 'Fulton', '76081409269');

COMMIT;

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES('The Stranger', 1942);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('In Search of Lost Time', 1927);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('The Trial', 1925);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('The Little Prince', 1943);

INSERT INTO BOOKS(TITLE, PUBYEAR)
VALUES ('Man''s Fate', 1933);

COMMIT;

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (1, 1,DATE_SUB(CURDATE(), INTERVAL 10 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (2, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (4, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), DATE_SUB(CURDATE(), INTERVAL 5 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (1, 3, DATE_SUB(CURDATE(), INTERVAL 8 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 3, DATE_SUB(CURDATE(), INTERVAL 4 DAY), DATE_SUB(CURDATE(), INTERVAL 2 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 4, DATE_SUB(CURDATE(), INTERVAL 10 DAY), DATE_SUB(CURDATE(), INTERVAL 8 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 5, DATE_SUB(CURDATE(), INTERVAL 8 DAY), null);

COMMIT;

select * from BOOKS;
select * from READERS;
select * from RENTS;

# PROCEDURE CREATION
DELIMITER $$

CREATE PROCEDURE ListBooks()
BEGIN
    SELECT * FROM BOOKS;
END $$

DELIMITER ;

# CALL THE PROCEDURE
CALL ListBooks();

# TO MODIFY PROCEDURE WE HAVE TO REMOVE IT FIRST AND CREATE A NEW ONE
DROP PROCEDURE IF EXISTS ListBooks;

DELIMITER $$

CREATE PROCEDURE ListBooks()

BEGIN
    SELECT BOOK_ID, TITLE, PUBYEAR FROM BOOKS;
END $$

DELIMITER ;

CALL ListBooks();

# FUNCTIONS
# DROP FUNCTION IF EXISTS VipLevel;
#
# DELIMITER $$
#
# CREATE FUNCTION VipLevel() RETURNS VARCHAR(20) DETERMINISTIC
# BEGIN
#     RETURN 'Standard customer';
# END $$
#
# DELIMITER ;
#
# SELECT VipLevel() AS LEVEL;

# # VipLevel v2
# DROP FUNCTION IF EXISTS VipLevel;
#
# DELIMITER $$
#
# CREATE FUNCTION VipLevel() RETURNS VARCHAR(20) DETERMINISTIC
# BEGIN
#     DECLARE result VARCHAR(20) DEFAULT 'Standard customer';
#     RETURN result;
# END $$
#
# DELIMITER ;
#
# SELECT VipLevel() AS LEVEL;

# VipLevel v3
DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel(booksRented INT) RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(20) DEFAULT 'Standard customer';
    IF booksRented >= 10 THEN
        SET result = 'Gold customer';
    ELSEIF booksRented >= 5 AND booksRented < 10 THEN
        SET result = 'Silver customer';
    ELSEIF booksRented >= 2 AND booksRented < 5 THEN
        SET result = 'Bronze customer';
    ELSE
        SET result = 'Standard customer';
    END IF;
    RETURN result;
END $$

DELIMITER ;

SELECT VipLevel(12) AS LEVEL;

# TASK 28.1 - GET CUSTOMER NAME BY ID PROCEDURE
DROP PROCEDURE IF EXISTS GetCustomerNameByID;

DELIMITER $$

CREATE PROCEDURE GetCustomerNameByID(IN customerID INT)

BEGIN
    IF customerID <= 0 THEN
        SELECT 'Incorrect customer ID' AS Message;
    ELSE
        SELECT FIRSTNAME AS UserName
        FROM READERS
        WHERE READER_ID = customerID;
    END IF;
END $$

DELIMITER ;

CALL GetCustomerNameByID(2);

# UPDATE READERS TABLE
ALTER TABLE READERS ADD VIP_LEVEL VARCHAR(20);

# # UpdateVipLevels procedure
# DROP PROCEDURE IF EXISTS UpdateVipLevels;
#
# DELIMITER $$
#
# CREATE PROCEDURE UpdateVipLevels()
# BEGIN
#     DECLARE BOOKSREAD INT;
#
#     SELECT COUNT(*) FROM RENTS
#         WHERE READER_ID = 3
#             INTO BOOKSREAD;
#
#     SELECT BOOKSREAD;
# END $$
#
# DELIMITER ;
#
# CALL UpdateVipLevels();
# select * from READERS;

# # UpdateVipLevels procedure v2
# DROP PROCEDURE IF EXISTS UpdateVipLevels;
#
# DELIMITER $$
#
# CREATE PROCEDURE UpdateVipLevels()
# BEGIN
#     DECLARE BOOKSREAD INT;
#     DECLARE DAYS INT;
#
#     SELECT COUNT(*) FROM RENTS
#     WHERE READER_ID = 3
#     INTO BOOKSREAD;
#
#     SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
#     WHERE READER_ID = 3
#     INTO DAYS;
#
#     SELECT BOOKSREAD, DAYS;
# END $$
#
# DELIMITER ;
#
# CALL UpdateVipLevels();

# # UpdateVipLevels procedure v3
# DROP PROCEDURE IF EXISTS UpdateVipLevels;
#
# DELIMITER $$
#
# CREATE PROCEDURE UpdateVipLevels()
# BEGIN
#     DECLARE BOOKSREAD INT;
#     DECLARE DAYS INT;
#     DECLARE BOOKSPERMONTH DECIMAL(5,2);
#
#     SELECT COUNT(*) FROM RENTS
#     WHERE READER_ID = 3
#     INTO BOOKSREAD;
#
#     SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
#     WHERE READER_ID = 3
#     INTO DAYS;
#
#     SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;
#
#     SELECT BOOKSREAD, DAYS, BOOKSPERMONTH;
# END $$
#
# DELIMITER ;
#
# CALL UpdateVipLevels();

# UpdateVipLevels procedure v4
DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD, DAYS, RDR_ID INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_READERS CURSOR FOR SELECT READER_ID FROM READERS;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
    OPEN ALL_READERS;

    WHILE (FINISHED = 0) DO
        FETCH ALL_READERS INTO RDR_ID;
        IF (FINISHED=0) THEN
            SELECT COUNT(*) FROM RENTS
            WHERE READER_ID = RDR_ID
            INTO BOOKSREAD;

            SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
            WHERE READER_ID = RDR_ID
            INTO DAYS;

            SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

            UPDATE READERS SET VIP_LEVEL = VipLevel(BOOKSPERMONTH)
            WHERE READER_ID = RDR_ID;
            COMMIT;
        END IF;
    END WHILE;
    CLOSE ALL_READERS;
END $$

DELIMITER ;

CALL UpdateVipLevels();
SELECT * FROM READERS;
SELECT * FROM RENTS;

# Show books per month per by customer id
DROP PROCEDURE IF EXISTS ShowCustomerBooksPerMonthByID;

DELIMITER $$

CREATE PROCEDURE ShowCustomerBooksPerMonthByID(customerID INT)
BEGIN
    DECLARE BOOKSREAD INT;
    DECLARE DAYS INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);

    SELECT COUNT(*) FROM RENTS
    WHERE READER_ID = customerID
    INTO BOOKSREAD;

    SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
    WHERE READER_ID = customerID
    INTO DAYS;

    SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

    SELECT customerID AS CUSTOMERID, BOOKSREAD, DAYS, BOOKSPERMONTH;
END $$

DELIMITER ;

CALL ShowCustomerBooksPerMonthByID(2);

# PROCEDURES AND FUNCTIONS STATUS
SHOW PROCEDURE STATUS;
SHOW FUNCTION STATUS;
SHOW CREATE PROCEDURE UpdateVipLevels;